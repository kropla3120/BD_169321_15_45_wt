DELIMITER $$

1.
CREATE TRIGGER check_weight BEFORE INSERT ON kreatura
FOR EACH ROW
BEGIN
  IF NEW.waga <= 0 THEN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Waga kreatury musi byc wieksza od zera';
  END IF;
END$$

2.
CREATE TABLE archiwum_wypraw(id_wyprawy INT NOT NULL, nazwa VARCHAR(200), data_rozpoczecia DATE, data_zakonczenia DATE, kierownik VARCHAR(30), PRIMARY KEY (id_wyprawy))$$

CREATE TRIGGER archwizacja_wypraw
BEFORE DELETE
ON wyprawa FOR EACH ROW
BEGIN
    INSERT INTO archiwum_wypraw(id_wyprawy, nazwa, data_rozpoczecia, data_zakonczenia, kierownik)
    VALUES(OLD.id_wyprawy,OLD.nazwa,OLD.data_rozpoczecia, OLD.data_zakonczenia, (select nazwa from kreatura where idKreatury = OLD.kierownik));
END$$

3.
CREATE PROCEDURE eliksir_sily (IN id INTEGER)
BEGIN
  UPDATE kreatura
  SET udzwig = udzwig * 1.2
  WHERE id_kreatury = id;
END $$

CREATE FUNCTION na_wielkie(tekst VARCHAR(255))
RETURNS VARCHAR(255)
BEGIN
  RETURN UPPER(tekst);
END$$

4.
CREATE TABLE system_alarmowy(id_alarmu INT NOT NULL AUTO_INCREMENT, wiadomosc VARCHAR(255), PRIMARY KEY (id_alarmu))$$

CREATE TRIGGER alarm_tesciowa
AFTER INSERT ON wyprawa
FOR EACH ROW
BEGIN
  DECLARE uczestnik_var VARCHAR(255);
  DECLARE sektor_var VARCHAR(255);

  SELECT u.nazwa INTO uczestnik_var
  FROM uczestnicy u
  LEFT JOIN kreatura k ON u.id_uczestnika = k.idKreatury
  WHERE u.idWyprawy = NEW.id_wyprawy AND k.nazwa = 'Tesciowa';

  SELECT e.sektor INTO sektor_var
  FROM etapy_wyprawy e
  LEFT JOIN sektor s on e.sektor = s.id_sektora
  WHERE e.idWyprawy = NEW.id_wyprawy AND s.nazwa = 'Chatka dziadka';

  IF uczestnik = 'Tesciowa' AND sektor = 'Chatka dziadka' THEN
    INSERT INTO system_alarmowy (wiadomosc) VALUES ('Tesciowa nadchodzi !!!');
  END IF;
END$$
